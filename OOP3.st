Class subclass: #MyObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP3'!!MyObject methodsFor: 'analzying' stamp: 'initalize 5/15/2017 22:27'!extractArgs: aString	"the method will extract the arguments to a orderedCollection of a method which will be returned."	| parser argsAsOrderedCollection |	parser:=Parser new.	"using the parser to get the aguments names"	argsAsOrderedCollection := parser parseParameterNames: aString.	^argsAsOrderedCollection.! !!MyObject methodsFor: 'analzying' stamp: 'initalize 5/16/2017 12:35'!extractReturn:aString	"the method will extract the returned type from aString. if not found Nil will be returned"	| regexObj returnedValue  |	regexObj := '\^([^.]*)\.' asRegex.	regexObj search: aString.	returnedValue := (regexObj  subexpression:2). 	^returnedValue.	! !!MyObject methodsFor: 'analzying' stamp: 'initalize 5/16/2017 11:37'!extractTypes: aString anotatedBy:anotation	"the method will extract the types of ArgTypes from a String"	|regexObj typesInString orderedTypes |	"the ordeder of the types is imprtant so we save it in an orderedCollection"	orderedTypes := OrderedCollection new.		"pulling all the types in argTypes via regex, including spaces"	regexObj :=  '"@',anotation,':\s*(.*\s*\w+)\."' asRegex.	typesInString := ((regexObj search: aString) subexpression: 2).	"adding the types to the collection which match with a word"	typesInString regex: '\w+' matchesCollect:[:each | orderedTypes add: each].		^orderedTypes.			! !!MyObject methodsFor: 'compiling' stamp: 'initalize 5/13/2017 20:54'!compile: text classified: category notifying: requestor	"the following method should:"	"check for errors"	"get the tags"	"change code"	|tagSet|	tagSet:=MyObject getTags:text.	super compile: text classified: category notifying: requestor.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyObject class	instanceVariableNames: ''!!MyObject class methodsFor: 'TagsHelper' stamp: 'initalize 5/13/2017 21:53'!extractTagContent: aTag	"the method get aTag for example @SomeTag and return SomeTag"	|tagSize tagContent|	tagSize:= (aTag size).	tagContent:= aTag copyFrom: 1 to: tagSize.	^tagContent.! !!MyObject class methodsFor: 'TagsHelper' stamp: 'initalize 5/13/2017 22:00'!getTags:aString	"a class method that get a String and returns a set of all the tags in that String without any special symbols, if no tags 	where found an empty Set is returned"	"example of such set will be:   {'New','Final','ArgsType'}"|regexString tagSet|tagSet:=Set new."defining all the tags to extract in Regex"regexString :='"@(Private|Override|New|Final|Abstract|ArgTypes:|RetType:)"'."iterate over the string matches and add it to the set"aString regex: regexString matchesCollect: [:tag | tagSet add: (self extractTagContent:tag). ].^tagSet.! !